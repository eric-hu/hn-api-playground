{"version":3,"sources":["reportWebVitals.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","StoryLoading","_jsxs","children","_jsx","href","StoryComponent","_story$kids","story","postTime","Date","time","toLocaleTimeString","type","url","id","title","by","pointNormalization","Math","floor","sqrt","score","pointBar","Array","fill","join","storyId","concat","descendants","kids","length","storiesInit","storiesReducer","state","action","stateClone","index","value","Error","StoryList","_sortedStoryPoints$","_sortedStoryPoints$2","_sortedStoryPoints$3","_sortedStoryPoints$4","page","setPage","useState","storyIDs","setStoryIDs","stories","storiesDispatch","useReducer","useEffect","fetch","response","json","topStoryIds","slice","forEach","storyID","sortedStoryPoints","sort","a","b","storiesMaxVotes","storiesMinVotes","storiesMedianVotes","storiesAverageVotes","reduce","accum","_Fragment","start","map","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a84545b1.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect, useState, useReducer, StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\ndeclare global {\n  interface Window {\n    jsonResponse: unknown;\n  }\n}\n\ntype StoryID = number;\n\ninterface Story {\n  by: string;\n  descendants: number;\n  id: StoryID;\n  /** The number of child comments. Count may not match what's visible on\n   * website. Includes at least deleted comments. */\n  kids: number[];\n  score: number;\n  time: number;\n  title: string;\n  type: \"story\" | unknown;\n  /** url is optional if text is provided */\n  url?: string;\n  /** text is optional if url is provided */\n  text?: string;\n}\n\n/** currently unused, but comes back in API responses */\nexport interface Job {\n  by: string;\n  id: StoryID;\n  score: number;\n  time: number;\n  title: string;\n  type: \"job\";\n\n  // This sometimes is empty from the API. It can be populated locally.\n  // Hard-coding it in rendering further below for now.\n  url: string;\n}\n\nconst fetchItem = (id: number): Promise<Story> => {\n  return fetch(\n    `https://hacker-news.firebaseio.com/v0/item/${id}.json?print=pretty`\n  ).then((response) => response.json());\n};\n\n\n/** Returns a promise that resolves the top 500 story ids, matching the HN\n * front page ordering (I think). Webpage paginates by 30 stories, so this is about 16-17 pages.*/\nconst fetchTopStoryIDs = (): Promise<StoryID[]> => {\n  return fetch(\n    \"https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty\"\n  ).then((response) => response.json());\n};\n\nconst HNCommentThreadURL = (storyId: number) =>\n  `https://news.ycombinator.com/item?id=${storyId}`;\n\nconst StoryLoading = () =>\n  <li>\n    <div>\n      <a href=\".\">Loading ... </a>\n    </div>\n    <div>\n      0 points.{\" \"}\n      <a href=\".\">\n        0 comments, 0 threads.\n      </a>{\" \"}\n      <a href=\".\">\n        By ... .\n      </a>{\" \"}\n      Time posted: ... .<pre>=</pre>\n    </div>\n  </li>\n\nconst StoryComponent = ({ story }: { story: Story }) => {\n  /** Compute the story time.\n   * - HN API gives the time as UNIX Epoch, which is in seconds, UTC.\n   * - Ecmascript epoch time is in milliseconds, UTC.\n   */\n  const postTime = new Date(story.time * 1000).toLocaleTimeString();\n\n  if (story.type === \"job\") {\n    if (!story.url) {\n      story.url = \"https://news.ycombinator.com/item?id=\" + story.id\n    }\n    return (\n      <li>\n        <pre>\n          +------------------------------------------------------------------+\n        </pre>\n        <div>\n          <a href={story.url}>{story.title}</a>\n        </div>\n        <div>\n          <a href={\"https://news.ycombinator.com/user?id=\" + story.by}>\n            By {story.by}.\n          </a>{\" \"}\n          Time posted: {postTime}.\n          <pre>\n            +------------------------------------------------------------------+\n          </pre>\n        </div>\n      </li>\n    );\n  }\n\n  /** Transform the story points so higher scoring stories are visually\n   * distinct. Try to use up all the available horizontal space (on mobile).\n   * Ensure that normalization is at least 1 so the empty state renders with\n   * height.\n   *\n   * Logarithm based normalization made all scores look too low. Perhaps that\n   * would be useful for a pretentious algorithm, AKA most stuff isn't worth\n   * reading. */\n  const pointNormalization = Math.floor(Math.sqrt(story.score)) + 1;\n  const pointBar = new Array(pointNormalization).fill(\"=>\").join(\"\");\n\n  return (\n    <li>\n      <div>\n        <a href={story.url}>{story.title}</a>\n      </div>\n      <div>\n        {story.score} points.{\" \"}\n        <a href={HNCommentThreadURL(story.id)}>\n          {story.descendants} comments, {story.kids?.length} threads.\n        </a>{\" \"}\n        <a href={\"https://news.ycombinator.com/user?id=\" + story.by}>\n          By {story.by}.\n        </a>{\" \"}\n        Time posted: {postTime}.<pre>{pointBar}</pre>\n      </div>\n    </li>\n  );\n};\n\ntype Action = { index: number, type: 'update', value: Story } | { type: 'reset' }\n\nconst storiesInit = () => Array(30).fill(null)\n\nfunction storiesReducer(state: Story[], action: Action): Story[] {\n  switch (action.type) {\n    case 'update':\n      const stateClone = [...state]\n      stateClone[action.index] = action.value\n      return stateClone\n    case 'reset':\n      return storiesInit();\n    default:\n      throw new Error();\n  }\n}\n\nconst StoryList = () => {\n  const [page, setPage] = useState<number>(1);\n  const [storyIDs, setStoryIDs] = useState<number[]>(Array(30).fill(null));\n  const [stories, storiesDispatch] = useReducer(storiesReducer, storiesInit());\n  useEffect(\n    () => {\n      fetchTopStoryIDs().then((topStoryIds: StoryID[]) =>\n        setStoryIDs(topStoryIds.slice((page - 1) * 30, page * 30))\n      )\n    },\n    // Force useEffect to fire only once; prevents an infinite loop with useState\n    [page]\n  );\n\n  useEffect(() => {\n    storyIDs.forEach((storyID, index) => {\n      if (storyID) {\n        fetchItem(storyID).then((story: Story) => {\n          storiesDispatch({ type: 'update', index: index, value: story })\n        })\n      }\n    })\n  },\n    [storyIDs]\n  )\n\n\n  // This runs more often than it needs to, but it can be optimized later\n  const sortedStoryPoints = [...stories].sort((a, b) => {\n    if (a?.score === b?.score) return 0;\n    if (a?.score < b?.score) return -1;\n    return 1;\n  })\n\n  const storiesMaxVotes = sortedStoryPoints[29]?.score\n  const storiesMinVotes = sortedStoryPoints[0]?.score\n  const storiesMedianVotes = (sortedStoryPoints[14]?.score + sortedStoryPoints[15]?.score) / 2\n  const storiesAverageVotes = sortedStoryPoints.reduce<number>((accum, story) => accum + story?.score, 0) / 30\n\n  return (\n    <>\n      <ol start={(page - 1) * 30 + 1}>\n        {stories.map((story, index) => (\n          story ?\n            <StoryComponent story={story} key={index + story.title} />\n            :\n            <StoryLoading key={index + \"loading\"} />\n        ))}\n      </ol>\n      {page === 1 ? (\n        <button\n          onClick={() => {\n            setPage(2);\n            storiesDispatch({ type: 'reset' });\n          }}\n        >\n          Page 2\n        </button>\n      ) : (\n        <button\n          onClick={() => {\n            setPage(1);\n            storiesDispatch({ type: 'reset' });\n          }}\n        >\n          Page 1\n        </button>\n      )}\n      <div>\n        <h3>Stats for this page:</h3>\n        <div>Max votes: {storiesMaxVotes}</div>\n        <div>Min votes: {storiesMinVotes}</div>\n        <div>Median votes: {storiesMedianVotes}</div>\n        <div>Average votes: {storiesAverageVotes}</div>\n      </div>\n    </>\n  );\n};\n\nReactDOM.render(\n  <StrictMode>\n    <StoryList />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
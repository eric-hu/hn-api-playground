{"version":3,"sources":["reportWebVitals.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StoryLoading","href","StoryComponent","story","postTime","Date","time","toLocaleTimeString","type","url","title","by","storyId","pointNormalization","Math","floor","sqrt","score","pointBar","Array","fill","join","id","descendants","kids","length","storiesInit","storiesReducer","state","action","stateClone","index","value","Error","StoryList","useState","page","setPage","storyIDs","setStoryIDs","useReducer","stories","storiesDispatch","useEffect","fetch","response","json","topStoryIds","slice","forEach","storyID","sortedStoryPoints","sort","a","b","storiesMaxVotes","storiesMinVotes","storiesMedianVotes","storiesAverageVotes","reduce","accum","start","map","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2aa7876c.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect, useState, useReducer, StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\ndeclare global {\n  interface Window {\n    jsonResponse: unknown;\n  }\n}\n\ntype StoryID = number;\n\ninterface Story {\n  by: string;\n  descendants: number;\n  id: StoryID;\n  /** The number of child comments. Count may not match what's visible on\n   * website. Includes at least deleted comments. */\n  kids: number[];\n  score: number;\n  time: number;\n  title: string;\n  type: \"story\" | unknown;\n  /** url is optional if text is provided */\n  url?: string;\n  /** text is optional if url is provided */\n  text?: string;\n}\n\n/** currently unused, but comes back in API responses */\nexport interface Job {\n  by: string;\n  id: StoryID;\n  score: number;\n  time: number;\n  title: string;\n  type: \"job\";\n  url: string;\n}\n\nconst fetchItem = (id: number): Promise<Story> => {\n  return fetch(\n    `https://hacker-news.firebaseio.com/v0/item/${id}.json?print=pretty`\n  ).then((response) => response.json());\n};\n\n\n/** Returns a promise that resolves the top 500 story ids, matching the HN\n * front page ordering (I think). Webpage paginates by 30 stories, so this is about 16-17 pages.*/\nconst fetchTopStoryIDs = (): Promise<StoryID[]> => {\n  return fetch(\n    \"https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty\"\n  ).then((response) => response.json());\n};\n\nconst HNCommentThreadURL = (storyId: number) =>\n  `https://news.ycombinator.com/item?id=${storyId}`;\n\nconst StoryLoading = () =>\n  <li>\n    <div>\n      <a href=\".\">Loading ... </a>\n    </div>\n    <div>\n      0 points.{\" \"}\n      <a href=\".\">\n        0 comments, 0 threads.\n      </a>{\" \"}\n      <a href=\".\">\n        By ... .\n      </a>{\" \"}\n      Time posted: ... .<pre>=</pre>\n    </div>\n  </li>\n\nconst StoryComponent = ({ story }: { story: Story }) => {\n  /** Compute the story time.\n   * - HN API gives the time as UNIX Epoch, which is in seconds, UTC.\n   * - Ecmascript epoch time is in milliseconds, UTC.\n   */\n  const postTime = new Date(story.time * 1000).toLocaleTimeString();\n\n  if (story.type === \"job\")\n    return (\n      <li>\n        <pre>\n          +------------------------------------------------------------------+\n        </pre>\n        <div>\n          <a href={story.url}>{story.title}</a>\n        </div>\n        <div>\n          <a href={\"https://news.ycombinator.com/user?id=\" + story.by}>\n            By {story.by}.\n          </a>{\" \"}\n          Time posted: {postTime}.\n          <pre>\n            +------------------------------------------------------------------+\n          </pre>\n        </div>\n      </li>\n    );\n\n  /** Transform the story points so higher scoring stories are visually\n   * distinct. Try to use up all the available horizontal space (on mobile).\n   * Ensure that normalization is at least 1 so the empty state renders with\n   * height.\n   *\n   * Logarithm based normalization made all scores look too low. Perhaps that\n   * would be useful for a pretentious algorithm, AKA most stuff isn't worth\n   * reading. */\n  const pointNormalization = Math.floor(Math.sqrt(story.score)) + 1;\n  const pointBar = new Array(pointNormalization).fill(\"=>\").join(\"\");\n\n  return (\n    <li>\n      <div>\n        <a href={story.url}>{story.title}</a>\n      </div>\n      <div>\n        {story.score} points.{\" \"}\n        <a href={HNCommentThreadURL(story.id)}>\n          {story.descendants} comments, {story.kids?.length} threads.\n        </a>{\" \"}\n        <a href={\"https://news.ycombinator.com/user?id=\" + story.by}>\n          By {story.by}.\n        </a>{\" \"}\n        Time posted: {postTime}.<pre>{pointBar}</pre>\n      </div>\n    </li>\n  );\n};\n\ntype Action = { index: number, type: 'update', value: Story } | { type: 'reset' }\n\nconst storiesInit = () => Array(30).fill(null)\n\nfunction storiesReducer(state: Story[], action: Action): Story[] {\n  switch (action.type) {\n    case 'update':\n      const stateClone = [...state]\n      stateClone[action.index] = action.value\n      return stateClone\n    case 'reset':\n      return storiesInit();\n    default:\n      throw new Error();\n  }\n}\n\nconst StoryList = () => {\n  const [page, setPage] = useState<number>(1);\n  const [storyIDs, setStoryIDs] = useState<number[]>(Array(30).fill(null));\n  const [stories, storiesDispatch] = useReducer(storiesReducer, storiesInit());\n  useEffect(\n    () => {\n      fetchTopStoryIDs().then((topStoryIds: StoryID[]) =>\n        setStoryIDs(topStoryIds.slice((page - 1) * 30, page * 30))\n      )\n    },\n    // Force useEffect to fire only once; prevents an infinite loop with useState\n    [page]\n  );\n\n  useEffect(() => {\n    storyIDs.forEach((storyID, index) => {\n      if (storyID) {\n        fetchItem(storyID).then((story: Story) => {\n          storiesDispatch({ type: 'update', index: index, value: story })\n        })\n      }\n    })\n  },\n    [storyIDs]\n  )\n\n\n  // This runs more often than it needs to, but it can be optimized later\n  const sortedStoryPoints = [...stories].sort((a, b) => {\n    if (a?.score === b?.score) return 0;\n    if (a?.score < b?.score) return -1;\n    return 1;\n  })\n\n  const storiesMaxVotes = sortedStoryPoints[29]?.score\n  const storiesMinVotes = sortedStoryPoints[0]?.score\n  const storiesMedianVotes = (sortedStoryPoints[14]?.score + sortedStoryPoints[15]?.score) / 2\n  const storiesAverageVotes = sortedStoryPoints.reduce<number>((accum, story) => accum + story?.score, 0) / 30\n\n  return (\n    <>\n      <ol start={(page - 1) * 30 + 1}>\n        {stories.map((story, index) => (\n          story ?\n            <StoryComponent story={story} key={index + story.title} />\n            :\n            <StoryLoading key={index + \"loading\"} />\n        ))}\n      </ol>\n      {page === 1 ? (\n        <button\n          onClick={() => {\n            setPage(2);\n            storiesDispatch({ type: 'reset' });\n          }}\n        >\n          Page 2\n        </button>\n      ) : (\n        <button\n          onClick={() => {\n            setPage(1);\n            storiesDispatch({ type: 'reset' });\n          }}\n        >\n          Page 1\n        </button>\n      )}\n      <div>\n        <h3>Stats for this page:</h3>\n        <div>Max votes: {storiesMaxVotes}</div>\n        <div>Min votes: {storiesMinVotes}</div>\n        <div>Median votes: {storiesMedianVotes}</div>\n        <div>Average votes: {storiesAverageVotes}</div>\n      </div>\n    </>\n  );\n};\n\nReactDOM.render(\n  <StrictMode>\n    <StoryList />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
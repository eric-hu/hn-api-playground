{"version":3,"sources":["reportWebVitals.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","fetchItem","id","fetch","response","json","StoryComponent","storyId","story","index","href","url","title","score","descendants","kids","length","by","time","Foo","useState","result","setResult","useEffect","jsonResponse","window","topStoryIds","Promise","all","slice","map","topStories","console","log","topStory","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+KAceA,G,KAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,OC8BRQ,EAAY,SAACC,GACjB,OAAOC,MAAM,8CAAD,OACoCD,EADpC,uBAEVP,MAAK,SAACS,GAAD,OAAcA,EAASC,WAa1BC,EAAiB,SAAC,GAAuD,IAAD,EAFlDC,EAEFC,EAAoD,EAApDA,MAAOC,EAA6C,EAA7CA,MAC/B,OACE,gCACE,gCACE,iCAAOA,EAAQ,EAAf,QACA,mBAAGC,KAAMF,EAAMG,IAAf,SAAqBH,EAAMI,WAE7B,gCACGJ,EAAMK,MADT,WACwB,IACtB,oBAAGH,MAXiBH,EAWQC,EAAMN,GAXf,+CACeK,IAUlC,UACGC,EAAMM,YADT,8BACuCN,EAAMO,YAD7C,aACuC,EAAYC,OADnD,uBAGK,IACL,oBAAGN,KAAM,wCAA0CF,EAAMS,GAAzD,gBACMT,EAAMS,GADZ,OAEK,IARP,gBASgBT,EAAMU,KATtB,OAWA,4BAKAC,EAAM,WAAO,IAAD,EACYC,mBAAkB,IAD9B,mBACTC,EADS,KACDC,EADC,KAsBhB,OApBAC,qBACE,WAjCKpB,MACL,sEACAR,MAAK,SAACS,GAAD,OAAcA,EAASC,UAiCvBV,MAAK,SAAC6B,GAEL,OADAC,OAAOD,aAAeA,EACfA,KAGR7B,MAAK,SAAC+B,GAAD,OACJC,QAAQC,IAAIF,EAAYG,MAAM,EAAG,IAAIC,IAAI7B,OAE1CN,MAAK,SAACoC,GACLC,QAAQC,IAAIF,GACZT,EAAUS,QAIhB,IAIA,8BACGV,EAAOS,KAAI,SAACI,EAAUzB,GAAX,OACV,cAAC,EAAD,CAAgBD,MAAO0B,EAAsBzB,MAAOA,GAAdA,SAM9C0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B/C,K","file":"static/js/main.9fdd9788.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\ndeclare global {\n  interface Window {\n    jsonResponse: unknown;\n  }\n}\n\ninterface Story {\n  by: string;\n  descendants: number;\n  id: number;\n  /** The number of child comments. Count may not match what's visible on\n   * website. Includes at least deleted comments. */\n  kids: number[];\n  score: number;\n  time: number;\n  title: string;\n  type: string;\n  /** url is optional if text is provided */\n  url?: string;\n  /** text is optional if url is provided */\n  text?: string;\n}\n\n/** currently unused, but comes back in API responses */\nexport interface Job {\n  by: string;\n  id: number;\n  score: number;\n  time: number;\n  title: string;\n  type: string;\n  url: string;\n}\n\nconst fetchItem = (id: number): Promise<Story> => {\n  return fetch(\n    `https://hacker-news.firebaseio.com/v0/item/${id}.json?print=pretty`\n  ).then((response) => response.json());\n};\n\n/** Returns a promise that resolves the top 500 story ids, matching the HN\n * front page ordering (I think). Webpage paginates by 30 stories, so this is about 16-17 pages.*/\nconst fetchTopStoryIDs = (): Promise<number[]> => {\n  return fetch(\n    \"https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty\"\n  ).then((response) => response.json());\n};\n\nconst HNCommentThreadURL = (storyId: number) =>\n  `https://news.ycombinator.com/item?id=${storyId}`;\nconst StoryComponent = ({ story, index }: { story: Story; index: number }) => {\n  return (\n    <div>\n      <div>\n        <span>{index + 1}. </span>\n        <a href={story.url}>{story.title}</a>\n      </div>\n      <div>\n        {story.score} points.{\" \"}\n        <a href={HNCommentThreadURL(story.id)}>\n          {story.descendants} total comments, {story.kids?.length} comment\n          threads.\n        </a>{\" \"}\n        <a href={\"https://news.ycombinator.com/user?id=\" + story.by}>\n          By {story.by}.\n        </a>{\" \"}\n        Time posted: {story.time}.\n      </div>\n      <div></div>\n    </div>\n  );\n};\n\nconst Foo = () => {\n  const [result, setResult] = useState<Story[]>([]);\n  useEffect(\n    () => {\n      fetchTopStoryIDs()\n        .then((jsonResponse) => {\n          window.jsonResponse = jsonResponse;\n          return jsonResponse;\n        })\n\n        .then((topStoryIds: number[]) =>\n          Promise.all(topStoryIds.slice(0, 30).map(fetchItem))\n        )\n        .then((topStories: Story[]) => {\n          console.log(topStories);\n          setResult(topStories);\n        });\n    },\n    // Force useEffect to fire only once; prevents an infinite loop with useState\n    []\n  );\n\n  return (\n    <div>\n      {result.map((topStory, index) => (\n        <StoryComponent story={topStory} key={index} index={index} />\n      ))}\n    </div>\n  );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <Foo />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
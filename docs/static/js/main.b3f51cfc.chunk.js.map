{"version":3,"sources":["reportWebVitals.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StoryComponent","storyID","useState","url","undefined","title","score","id","descendants","by","kids","time","type","story","setStory","useEffect","fetch","response","json","storyId","postTime","Date","toLocaleTimeString","pointNormalization","Math","floor","sqrt","pointBar","Array","fill","join","href","length","StoryList","result","setResult","topStoryIds","slice","map","topStoryID","index","ReactDOM","render","document","getElementById"],"mappings":"sKAceA,G,KAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,OC+CRQ,EAAiB,SAAC,GAAsC,IAAD,EAAnCC,EAAmC,EAAnCA,QAAmC,EACjCC,mBAAgB,CACxCC,SAAKC,EACLC,MAAO,UACPC,MAAO,EACPC,GAAI,EACJC,YAAa,EACbC,GAAI,UACJC,KAAM,GACNC,KAAM,EACNC,KAAM,UAVmD,mBACpDC,EADoD,KAC7CC,EAD6C,KAmB3D,GANAC,qBAAU,WA9BM,IAACR,EA+BC,OAAZN,IA/BWM,EAgCHN,EA/BPe,MAAM,8CAAD,OACoCT,EADpC,uBAEVb,MAAK,SAACuB,GAAD,OAAcA,EAASC,WA6BPxB,MAAK,SAACmB,GAAD,OAAkBC,EAASD,QAEpD,CAACZ,IAEY,OAAZA,EAAkB,OAAO,KAM7B,IA5B0BkB,EA4BpBC,EAAW,IAAIC,KAAkB,IAAbR,EAAMF,MAAaW,qBAOvCC,EAAqBC,KAAKC,MAAMD,KAAKE,KAAKb,EAAMP,QAChDqB,EAAW,IAAIC,MAAML,GAAoBM,KAAK,MAAMC,KAAK,IAC/D,OACE,+BACE,8BACE,mBAAGC,KAAMlB,EAAMV,IAAf,SAAqBU,EAAMR,UAE7B,gCACGQ,EAAMP,MADT,WACwB,IACtB,oBAAGyB,MA5CiBZ,EA4CQN,EAAMN,GA5Cf,+CACeY,IA2ClC,UACGN,EAAML,YADT,wBACiCK,EAAMH,YADvC,aACiC,EAAYsB,OAD7C,eAEK,IACL,oBAAGD,KAAM,wCAA0ClB,EAAMJ,GAAzD,gBACMI,EAAMJ,GADZ,OAEK,IAPP,gBAQgBW,EARhB,IAQ0B,8BAAMO,WAMhCM,EAAY,WAAO,IAAD,EACM/B,mBAAmB0B,MAAM,IAAIC,KAAK,OADxC,mBACfK,EADe,KACPC,EADO,KAYtB,OAVApB,qBACE,WAhEKC,MACL,sEACAtB,MAAK,SAACuB,GAAD,OAAcA,EAASC,UA+DPxB,MAAK,SAAC0C,GAAD,OACtBD,EAAUC,EAAYC,MAAM,EAAG,UAInC,IAIA,6BACGH,EAAOI,KAAI,SAACC,EAAYC,GAAb,OACV,cAAC,EAAD,CAAgBvC,QAASsC,GAAiBC,SAMlDC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BrD,K","file":"static/js/main.b3f51cfc.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect, useState, StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\ndeclare global {\n  interface Window {\n    jsonResponse: unknown;\n  }\n}\n\ninterface Story {\n  by: string;\n  descendants: number;\n  id: number;\n  /** The number of child comments. Count may not match what's visible on\n   * website. Includes at least deleted comments. */\n  kids: number[];\n  score: number;\n  time: number;\n  title: string;\n  type: string;\n  /** url is optional if text is provided */\n  url?: string;\n  /** text is optional if url is provided */\n  text?: string;\n}\n\n/** currently unused, but comes back in API responses */\nexport interface Job {\n  by: string;\n  id: number;\n  score: number;\n  time: number;\n  title: string;\n  type: string;\n  url: string;\n}\n\nconst fetchItem = (id: number): Promise<Story> => {\n  return fetch(\n    `https://hacker-news.firebaseio.com/v0/item/${id}.json?print=pretty`\n  ).then((response) => response.json());\n};\n\n/** Returns a promise that resolves the top 500 story ids, matching the HN\n * front page ordering (I think). Webpage paginates by 30 stories, so this is about 16-17 pages.*/\nconst fetchTopStoryIDs = (): Promise<number[]> => {\n  return fetch(\n    \"https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty\"\n  ).then((response) => response.json());\n};\n\nconst HNCommentThreadURL = (storyId: number) =>\n  `https://news.ycombinator.com/item?id=${storyId}`;\n\nconst StoryComponent = ({ storyID }: { storyID: number }) => {\n  const [story, setStory] = useState<Story>({\n    url: undefined,\n    title: \"loading\",\n    score: 0,\n    id: 0,\n    descendants: 0,\n    by: \"loading\",\n    kids: [],\n    time: 0,\n    type: \"story\",\n  });\n\n  useEffect(() => {\n    if (storyID !== null) {\n      fetchItem(storyID).then((story: Story) => setStory(story));\n    }\n  }, [storyID]);\n\n  if (storyID === null) return null;\n\n  /** Compute the story time.\n   * - HN API gives the time as UNIX Epoch, which is in seconds, UTC.\n   * - Ecmascript epoch time is in milliseconds, UTC.\n   */\n  const postTime = new Date(story.time * 1000).toLocaleTimeString();\n\n  /** Transform the story points so higher scoring stories are visually\n   * distinct. Try to use up all the available horizontal space (on mobile).\n   * Logarithm based normalization made all scores look too low. Perhaps that\n   * would be useful for a pretentious algorithm, AKA most stuff isn't worth\n   * reading. */\n  const pointNormalization = Math.floor(Math.sqrt(story.score));\n  const pointBar = new Array(pointNormalization).fill(\"=>\").join(\"\");\n  return (\n    <li>\n      <div>\n        <a href={story.url}>{story.title}</a>\n      </div>\n      <div>\n        {story.score} points.{\" \"}\n        <a href={HNCommentThreadURL(story.id)}>\n          {story.descendants} comments, {story.kids?.length} threads.\n        </a>{\" \"}\n        <a href={\"https://news.ycombinator.com/user?id=\" + story.by}>\n          By {story.by}.\n        </a>{\" \"}\n        Time posted: {postTime}.<pre>{pointBar}</pre>\n      </div>\n    </li>\n  );\n};\n\nconst StoryList = () => {\n  const [result, setResult] = useState<number[]>(Array(30).fill(null));\n  useEffect(\n    () => {\n      fetchTopStoryIDs().then((topStoryIds: number[]) =>\n        setResult(topStoryIds.slice(0, 30))\n      );\n    },\n    // Force useEffect to fire only once; prevents an infinite loop with useState\n    []\n  );\n\n  return (\n    <ol>\n      {result.map((topStoryID, index) => (\n        <StoryComponent storyID={topStoryID} key={index} />\n      ))}\n    </ol>\n  );\n};\n\nReactDOM.render(\n  <StrictMode>\n    <StoryList />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
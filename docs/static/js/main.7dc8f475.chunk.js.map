{"version":3,"sources":["reportWebVitals.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","fetchItem","id","fetch","response","json","Foo","useState","result","setResult","useEffect","jsonResponse","window","topStoryIds","Promise","all","slice","map","topStories","topStory","url","JSON","stringify","React","createElement","dangerouslySetInnerHTML","__html","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAceA,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCgBRQ,EAAY,SAACC,GACjB,OAAOC,MAAM,8CAAD,OACoCD,EADpC,uBAEVP,MAAK,SAACS,GAAD,OAAcA,EAASC,WAW1BC,EAAM,WAAO,IAAD,EACYC,qBADZ,mBACTC,EADS,KACDC,EADC,KA2ChB,OAzCAC,qBAAU,WAPHP,MACL,sEACAR,MAAK,SAACS,GAAD,OAAcA,EAASC,UAOzBV,MAAK,SAACgB,GAEL,OADAC,OAAOD,aAAeA,EACfA,KAgBRhB,MAAK,SAACkB,GAAD,OACJC,QAAQC,IAAIF,EAAYG,MAAM,EAAG,IAAIC,IAAIhB,OAE1CN,MAAK,SAACuB,GAELA,EAAaA,EAAWD,KAAI,SAACE,GAAD,mBAAC,eACxBA,GADuB,IAE1BC,IAAI,WAAD,OAAaD,EAASC,IAAtB,YAA6BD,EAASC,IAAtC,aAELX,EACEY,KAAKC,UACHJ,EACA,CAAC,KAAM,KAAM,QAAS,QAAS,MAAO,cAAe,QACrD,UAQHK,IAAMC,cAAc,MAAO,CAChCC,wBAAyB,CAAEC,OAAQlB,MAIvCmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BvC,M","file":"static/js/main.7dc8f475.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\ndeclare global {\n  interface Window {\n    jsonResponse: unknown;\n  }\n}\n\ninterface Story {\n  by: string;\n  descendants: number;\n  id: number;\n  /** The number of child comments. Count may not match what's visible on\n   * website. Includes at least deleted comments. */\n  kids: number[];\n  score: number;\n  time: number;\n  title: string;\n  type: string;\n  url: string;\n}\n\nconst fetchItem = (id: number): Promise<Story> => {\n  return fetch(\n    `https://hacker-news.firebaseio.com/v0/item/${id}.json?print=pretty`\n  ).then((response) => response.json());\n};\n\n/** Returns a promise that resolves the top 500 story ids, matching the HN\n * front page ordering (I think). Webpage paginates by 30 stories, so this is about 16-17 pages.*/\nconst fetchTopStoryIDs = (): Promise<number[]> => {\n  return fetch(\n    \"https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty\"\n  ).then((response) => response.json());\n};\n\nconst Foo = () => {\n  const [result, setResult] = useState<unknown>();\n  useEffect(() => {\n    fetchTopStoryIDs()\n      .then((jsonResponse) => {\n        window.jsonResponse = jsonResponse;\n        return jsonResponse;\n      })\n      /** Show just one story */\n      // .then((topStoryIds: number[]) => fetchItem(topStoryIds[0]))\n      // .then((topStory: unknown) => {\n      //   // @ts-ignore\n      //   topStory.url = `<a href=${topStory.url}>${topStory.url}</a>`;\n      //   setResult(\n      //     JSON.stringify(\n      //       topStory,\n      //       [\"by\", \"id\", \"score\", \"title\", \"url\", \"descendants\", \"time\"],\n      //       2\n      //     )\n      //   );\n\n      /** Show top N stories */\n      .then((topStoryIds: number[]) =>\n        Promise.all(topStoryIds.slice(0, 30).map(fetchItem))\n      )\n      .then((topStories: unknown) => {\n        // @ts-ignore\n        topStories = topStories.map((topStory) => ({\n          ...topStory,\n          url: `<a href=${topStory.url}>${topStory.url}</a>`,\n        }));\n        setResult(\n          JSON.stringify(\n            topStories,\n            [\"by\", \"id\", \"score\", \"title\", \"url\", \"descendants\", \"time\"],\n            2\n          )\n        );\n      });\n  });\n\n  // return <pre>{result as any}</pre>;\n  /** React will sanitize HTML unless it's called using dangerouslySetInnerHTML */\n  return React.createElement(\"pre\", {\n    dangerouslySetInnerHTML: { __html: result as any },\n  });\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <Foo />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}